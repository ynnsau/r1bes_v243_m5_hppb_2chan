// (C) 2001-2024 Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions and other 
// software and tools, and its AMPP partner logic functions, and any output 
// files from any of the foregoing (including device programming or simulation 
// files), and any associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License Subscription 
// Agreement, Intel FPGA IP License Agreement, or other applicable 
// license agreement, including, without limitation, that your use is for the 
// sole purpose of programming logic devices manufactured by Intel and sold by 
// Intel or its authorized distributors.  Please refer to the applicable 
// agreement for further details.


//Legal Notice: (C)2023 Altera Corporation. All rights reserved.  Your
//use of Altera Corporation's design tools, logic functions and other
//software and tools, and its AMPP partner logic functions, and any
//output files any of the foregoing (including device programming or
//simulation files), and any associated documentation or information are
//expressly subject to the terms and conditions of the Altera Program
//License Subscription Agreement or other applicable license agreement,
//including, without limitation, that your use is for the sole purpose
//of programming logic devices manufactured by Altera and sold by Altera
//or its authorized distributors.  Please refer to the applicable
//agreement for further details.
// pcie_ed_altera_merlin_burst_adapter_altera_avalon_st_pipeline_stage_1922_pev47ty.v

// Generated using ACDS version 22.1 174

`timescale 1 ps / 1 ps
module pcie_ed_altera_merlin_burst_adapter_altera_avalon_st_pipeline_stage_1922_pev47ty #(
		parameter SYMBOLS_PER_BEAT = 1,
		parameter BITS_PER_SYMBOL  = 1267,
		parameter USE_PACKETS      = 1,
		parameter USE_EMPTY        = 0,
		parameter EMPTY_WIDTH      = 0,
		parameter CHANNEL_WIDTH    = 1,
		parameter PACKET_WIDTH     = 2,
		parameter ERROR_WIDTH      = 0,
		parameter PIPELINE_READY   = 1,
		parameter SYNC_RESET       = 1
	) (
		input  wire          clk,               //       cr0.clk
		input  wire          reset,             // cr0_reset.reset
		output wire          in_ready,          //     sink0.ready
		input  wire          in_valid,          //          .valid
		input  wire          in_startofpacket,  //          .startofpacket
		input  wire          in_endofpacket,    //          .endofpacket
		input  wire [1266:0] in_data,           //          .data
		input  wire [0:0]    in_channel,        //          .channel
		input  wire          out_ready,         //   source0.ready
		output wire          out_valid,         //          .valid
		output wire          out_startofpacket, //          .startofpacket
		output wire          out_endofpacket,   //          .endofpacket
		output wire [1266:0] out_data,          //          .data
		output wire [0:0]    out_channel        //          .channel
	);

	pcie_ed_altera_avalon_st_pipeline_stage_1920_zterisq #(
		.SYMBOLS_PER_BEAT (SYMBOLS_PER_BEAT),
		.BITS_PER_SYMBOL  (BITS_PER_SYMBOL),
		.USE_PACKETS      (USE_PACKETS),
		.USE_EMPTY        (USE_EMPTY),
		.EMPTY_WIDTH      (EMPTY_WIDTH),
		.CHANNEL_WIDTH    (CHANNEL_WIDTH),
		.PACKET_WIDTH     (PACKET_WIDTH),
		.ERROR_WIDTH      (ERROR_WIDTH),
		.PIPELINE_READY   (PIPELINE_READY),
		.SYNC_RESET       (SYNC_RESET)
	) my_altera_avalon_st_pipeline_stage (
		.clk               (clk),               //   input,     width = 1,       cr0.clk
		.reset             (reset),             //   input,     width = 1, cr0_reset.reset
		.in_ready          (in_ready),          //  output,     width = 1,     sink0.ready
		.in_valid          (in_valid),          //   input,     width = 1,          .valid
		.in_startofpacket  (in_startofpacket),  //   input,     width = 1,          .startofpacket
		.in_endofpacket    (in_endofpacket),    //   input,     width = 1,          .endofpacket
		.in_data           (in_data),           //   input,  width = 1267,          .data
		.in_channel        (in_channel),        //   input,     width = 1,          .channel
		.out_ready         (out_ready),         //   input,     width = 1,   source0.ready
		.out_valid         (out_valid),         //  output,     width = 1,          .valid
		.out_startofpacket (out_startofpacket), //  output,     width = 1,          .startofpacket
		.out_endofpacket   (out_endofpacket),   //  output,     width = 1,          .endofpacket
		.out_data          (out_data),          //  output,  width = 1267,          .data
		.out_channel       (out_channel),       //  output,     width = 1,          .channel
		.in_empty          (1'b0),              // (terminated),                          
		.out_empty         (),                  // (terminated),                          
		.out_error         (),                  // (terminated),                          
		.in_error          (1'b0)               // (terminated),                          
	);

endmodule
`ifdef QUESTA_INTEL_OEM
`pragma questa_oem_00 "EtAh8aN7m2BPKOTfO5tEAbNSD19BnNEklF4xQRY7YZ2oRe/8wDIRx8XCKuwkXQtjYcM5gRXSD6c+oGX77mfnvlAGw9KTmnXPBu3GU7e3qFjUTrXWlEAN76gMqJTePk91Iv2qtpAKuY2LJHLiowUVDoSuAt1Csh1O2u7qDzQRIaeVL/AJWYDMfWERE2K26wZcHHB8eTbMnhSND4m01aQODfKXixyUFYBUVJCy/gZrUwB0qQILmzzs13ybSmImbd2KnMT0N9cFyZAat+tyG5ECODmuphBBNuFTMZ9qB1T6t81xcmRoaAZNy6PwNfrj0CQN8U+dRRP+xeFO0EyBH88h1TXGbnvpICVoAsB7V7KJDFtKTJHMG5X5TwnAsc0N2V9zEU4JjGFZy6sVDfuNmvWs4e2SP5i6Bzg02HqmMBxn8Wc6HQQuJ/iPAmKoLc4juZJmNKuou6hr0m/q91i25qE1QBdUR/9IFjEpJTJ7QHFSSR6NqQI3GUc93Q9bjkG1qc4A9m5jJ6GytIdLuQsR/VYbvCXzsE7hl7LFYhQTIOzGaM84g0ykxxhfENvpULnaj5NpeLTYCAxd3YqwOBGc6ybMo5FUYb5QZJpsnpc+ErTLIvjZIqmvz2YpvlEVmjRdqm5P0/KTS/RDUOCLLyaUP5bF82cU/lKhpIDibcbp9zJ5faRpvmw++SPX65qjY0gVZBvoxRzPF9VnIoYF2Fu92u3I0GIrA48pyNle40p6j5XQFt2Jd89ZW4hJi14DlQBl8Cbme2B1iOMw6rJ4kAo0RjK8wjyMp+sIhcTcZX86MIPD4KkSXmMyE+ZAVVKPSS54CnYnYR9SUImFHKFnrRcB64yiaGMHLxAA1gTbbN2uCswyq1IV9WD6gQvQJ9SoVimW1at197ehTNxE7ZmQ0YluJ5qzUW0zLXLj6//wpBR65WAWsw/ED+SKQmcCQ3661qCrd/CAFd2DFoHIFxXuWjgTHGluEF36CG/73SZmNsUzDeZL9gF66zDfJMbnJA/us0LE6pY1"
`endif