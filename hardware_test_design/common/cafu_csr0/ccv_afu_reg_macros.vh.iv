// (C) 2001-2024 Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions and other 
// software and tools, and its AMPP partner logic functions, and any output 
// files from any of the foregoing (including device programming or simulation 
// files), and any associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License Subscription 
// Agreement, Intel FPGA IP License Agreement, or other applicable 
// license agreement, including, without limitation, that your use is for the 
// sole purpose of programming logic devices manufactured by Intel and sold by 
// Intel or its authorized distributors.  Please refer to the applicable 
// agreement for further details.


// Copyright 2023 Intel Corporation.
//
// THIS SOFTWARE MAY CONTAIN PREPRODUCTION CODE AND IS PROVIDED BY THE
// COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
// BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
// OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
///////////////////////////////////////////////////////////////////////
// ===================================================================
// Flops macros 
// ===================================================================

`define RTLGEN_CCV_AFU_FF(rtl_clk, rst_n, rst_val, d, q) \
    always_ff @(posedge rtl_clk) \
        if (!rst_n) q <= rst_val; \
        else        q <= d;

`define RTLGEN_CCV_AFU_EN_FF(rtl_clk, rst_n, rst_val, en, d, q) \
    always_ff @(posedge rtl_clk) \
        if (!rst_n) q <= rst_val; \
        else \
            if (en) q <= d;

`define RTLGEN_CCV_AFU_FF_NEGEDGE(rtl_clk, rst_n, rst_val, d, q) \
    always_ff @(negedge rtl_clk) \
        if (!rst_n) q <= rst_val; \
        else        q <= d;

`define RTLGEN_CCV_AFU_EN_FF_NEGEDGE(rtl_clk, rst_n, rst_val, en, d, q) \
    always_ff @(negedge rtl_clk) \
        if (!rst_n) q <= rst_val; \
        else \
            if (en) q <= d;

`define RTLGEN_CCV_AFU_FF_RSTD(rtl_clk, rst_n, rst_val, d, q) \
   genvar \gen_``d`` ; \
   generate \
      if (1) begin : \ff_rstd_``d`` \
         logic [$bits(q)-1:0] rst_vec, set_vec, d_vec, q_vec; \
         assign rst_vec = !rst_n ? ~rst_val : '0; \
         assign set_vec = !rst_n ? rst_val : '0; \
         assign d_vec = d; \
         assign q = q_vec; \
         for ( \gen_``d`` = 0 ; \gen_``d`` < $bits(q) ; \gen_``d`` = \gen_``d`` + 1)  \
            always_ff @(posedge rtl_clk) \
               if (rst_vec[ \gen_``d`` ]) \
                  q_vec[ \gen_``d`` ] <= '0; \
               else if (set_vec[ \gen_``d`` ]) \
                  q_vec[ \gen_``d`` ] <= '1; \
               else   \
                  q_vec[ \gen_``d`` ] <= d_vec[ \gen_``d`` ]; \
      end \
   endgenerate       

`define RTLGEN_CCV_AFU_EN_FF_RSTD(rtl_clk, rst_n, rst_val, en, d, q) \
   genvar \gen_``d`` ; \
   generate \
      if (1) begin : \en_ff_rstd_``d`` \
         logic [$bits(q)-1:0] rst_vec, set_vec, d_vec, q_vec; \
         assign rst_vec = !rst_n ? ~rst_val : '0; \
         assign set_vec = !rst_n ? rst_val : '0; \
         assign d_vec = d; \
         assign q = q_vec; \
         for ( \gen_``d`` = 0 ; \gen_``d`` < $bits(q) ; \gen_``d`` = \gen_``d`` + 1)  \
            always_ff @(posedge rtl_clk) \
               if (rst_vec[ \gen_``d`` ]) \
                  q_vec[ \gen_``d`` ] <= '0; \
               else if (set_vec[ \gen_``d`` ]) \
                  q_vec[ \gen_``d`` ] <= '1; \
               else if (en)  \
                  q_vec[ \gen_``d`` ] <= d_vec[ \gen_``d`` ]; \
      end \
   endgenerate       


`ifdef QUESTA_INTEL_OEM
`pragma questa_oem_00 "8PhOGCnqQbAbJgmQKuGahsXyBGOqnzJpaaepB4em/LfHKuzJoKpoYsBe35LjKDi25jgan/aauEWsf8HDTdfj7jcC2yCsixDCQ3p7OCgc9Hp1H2OzKOvi1qhwBi7kYnvuqWX26D6nOTtEFDfggOZVro8JXoRIL9p3vh13LBiTXTGn8SWhyyzJS6Tqcxi2IXTDzRrzmeGJnXTRhMERLiUIGnZaBs86Pr/nV4RjvtzkvHGelwLB3pod4+dI14YS6CcPGuGP363k4amSr87rdxCWNCg2+G9Gln9sUmCdoeeuwK0LgNGUcO/dxsqhVSLbjipCK+21QwegQnO811QaqElHE4Bx4QH3zu02juvpvBg7lS6dvrSB4H0ADbImF9qGnrKX0lCSLGL0ysHXfqc1d4Sg4Lz02LBzLWpjL3/Ptghnt0ICzMcVbdpmfsg9kPxy93MTo20PDHGyFvptHhh/XyktA3xp8p89M0gzGumrmcJ8GRRzXVw5CxruiHI5x0ZJc3CIg8SMDJ4ekfBNhTWfBGIovCCVp2OSW4iNfN7kXq8H1Ym7yAdj+5lzIIH+UiY8uHQJNPco1gi+6hswsHgcqCw/q6kPgf3nqEVN82JmXKXBD5ayELHZjkJlZqgbpi/HxwVCuTM/XHfg2duptlpWWXZe6U6paz9R8ixxg9z/6whmqIQrJMRNyx0i8HBKiWyjWw1/VPSv+w2p05v6bErwxpybcJijZqMHK/d3Hf2qplyjTYR/rm5xlyG9TtKfnRZGeeMbH5qD8pGkgIBWD3mC1VW37n9b6uyr5AMHZR24Od6f4Hb2MkbjPk8/lSsZ8GLYrRwMWqsJBt5jvKlViWfrLsWuxmIiPTHQryWalhUUVWwTetMyZSHnj5yx/cq6eB9/tn1lnqW+VIVimmvS5m9GeXXeDI9Jlf/MT2KpzH+v87SnvngMzS4B3JlvKgAhbNY5IC9gPZULHNCQ3f9tcGIfvtjogZMSskDTuqp8msLfxrdKyCeEVRJMHX4O4ShwpAI2beBk"
`endif