--lpm_decode CBX_SINGLE_OUTPUT_FILE="OFF" DEVICE_FAMILY="Agilex 7" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 24.3 cbx_lpm_add_sub 2024:10:24:10:32:27:SC cbx_lpm_compare 2024:10:24:10:32:27:SC cbx_lpm_decode 2024:10:24:10:32:27:SC cbx_mgl 2024:10:24:10:32:30:SC cbx_nadder 2024:10:24:10:32:27:SC cbx_stratix 2024:10:24:10:32:27:SC cbx_stratixii 2024:10:24:10:32:27:SC  VERSION_END


-- Copyright (C) 2024  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the Intel FPGA Software License Subscription Agreements 
--  on the Quartus Prime software download page.



--synthesis_resources = lut 18 
SUBDESIGN decode_f1g81
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode483w[1..0]	: WIRE;
	w_anode492w[3..0]	: WIRE;
	w_anode509w[3..0]	: WIRE;
	w_anode519w[3..0]	: WIRE;
	w_anode529w[3..0]	: WIRE;
	w_anode539w[3..0]	: WIRE;
	w_anode549w[3..0]	: WIRE;
	w_anode559w[3..0]	: WIRE;
	w_anode569w[3..0]	: WIRE;
	w_anode581w[1..0]	: WIRE;
	w_anode588w[3..0]	: WIRE;
	w_anode599w[3..0]	: WIRE;
	w_anode609w[3..0]	: WIRE;
	w_anode619w[3..0]	: WIRE;
	w_anode629w[3..0]	: WIRE;
	w_anode639w[3..0]	: WIRE;
	w_anode649w[3..0]	: WIRE;
	w_anode659w[3..0]	: WIRE;
	w_data481w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode659w[3..3], w_anode649w[3..3], w_anode639w[3..3], w_anode629w[3..3], w_anode619w[3..3], w_anode609w[3..3], w_anode599w[3..3], w_anode588w[3..3]), ( w_anode569w[3..3], w_anode559w[3..3], w_anode549w[3..3], w_anode539w[3..3], w_anode529w[3..3], w_anode519w[3..3], w_anode509w[3..3], w_anode492w[3..3]));
	w_anode483w[] = ( (w_anode483w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode492w[] = ( (w_anode492w[2..2] & (! w_data481w[2..2])), (w_anode492w[1..1] & (! w_data481w[1..1])), (w_anode492w[0..0] & (! w_data481w[0..0])), w_anode483w[1..1]);
	w_anode509w[] = ( (w_anode509w[2..2] & (! w_data481w[2..2])), (w_anode509w[1..1] & (! w_data481w[1..1])), (w_anode509w[0..0] & w_data481w[0..0]), w_anode483w[1..1]);
	w_anode519w[] = ( (w_anode519w[2..2] & (! w_data481w[2..2])), (w_anode519w[1..1] & w_data481w[1..1]), (w_anode519w[0..0] & (! w_data481w[0..0])), w_anode483w[1..1]);
	w_anode529w[] = ( (w_anode529w[2..2] & (! w_data481w[2..2])), (w_anode529w[1..1] & w_data481w[1..1]), (w_anode529w[0..0] & w_data481w[0..0]), w_anode483w[1..1]);
	w_anode539w[] = ( (w_anode539w[2..2] & w_data481w[2..2]), (w_anode539w[1..1] & (! w_data481w[1..1])), (w_anode539w[0..0] & (! w_data481w[0..0])), w_anode483w[1..1]);
	w_anode549w[] = ( (w_anode549w[2..2] & w_data481w[2..2]), (w_anode549w[1..1] & (! w_data481w[1..1])), (w_anode549w[0..0] & w_data481w[0..0]), w_anode483w[1..1]);
	w_anode559w[] = ( (w_anode559w[2..2] & w_data481w[2..2]), (w_anode559w[1..1] & w_data481w[1..1]), (w_anode559w[0..0] & (! w_data481w[0..0])), w_anode483w[1..1]);
	w_anode569w[] = ( (w_anode569w[2..2] & w_data481w[2..2]), (w_anode569w[1..1] & w_data481w[1..1]), (w_anode569w[0..0] & w_data481w[0..0]), w_anode483w[1..1]);
	w_anode581w[] = ( (w_anode581w[0..0] & data_wire[3..3]), enable_wire);
	w_anode588w[] = ( (w_anode588w[2..2] & (! w_data481w[2..2])), (w_anode588w[1..1] & (! w_data481w[1..1])), (w_anode588w[0..0] & (! w_data481w[0..0])), w_anode581w[1..1]);
	w_anode599w[] = ( (w_anode599w[2..2] & (! w_data481w[2..2])), (w_anode599w[1..1] & (! w_data481w[1..1])), (w_anode599w[0..0] & w_data481w[0..0]), w_anode581w[1..1]);
	w_anode609w[] = ( (w_anode609w[2..2] & (! w_data481w[2..2])), (w_anode609w[1..1] & w_data481w[1..1]), (w_anode609w[0..0] & (! w_data481w[0..0])), w_anode581w[1..1]);
	w_anode619w[] = ( (w_anode619w[2..2] & (! w_data481w[2..2])), (w_anode619w[1..1] & w_data481w[1..1]), (w_anode619w[0..0] & w_data481w[0..0]), w_anode581w[1..1]);
	w_anode629w[] = ( (w_anode629w[2..2] & w_data481w[2..2]), (w_anode629w[1..1] & (! w_data481w[1..1])), (w_anode629w[0..0] & (! w_data481w[0..0])), w_anode581w[1..1]);
	w_anode639w[] = ( (w_anode639w[2..2] & w_data481w[2..2]), (w_anode639w[1..1] & (! w_data481w[1..1])), (w_anode639w[0..0] & w_data481w[0..0]), w_anode581w[1..1]);
	w_anode649w[] = ( (w_anode649w[2..2] & w_data481w[2..2]), (w_anode649w[1..1] & w_data481w[1..1]), (w_anode649w[0..0] & (! w_data481w[0..0])), w_anode581w[1..1]);
	w_anode659w[] = ( (w_anode659w[2..2] & w_data481w[2..2]), (w_anode659w[1..1] & w_data481w[1..1]), (w_anode659w[0..0] & w_data481w[0..0]), w_anode581w[1..1]);
	w_data481w[2..0] = data_wire[2..0];
END;
--VALID FILE
