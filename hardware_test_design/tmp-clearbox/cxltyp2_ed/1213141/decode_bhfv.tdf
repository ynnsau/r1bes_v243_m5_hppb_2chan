--lpm_decode CBX_SINGLE_OUTPUT_FILE="OFF" DEVICE_FAMILY="Agilex 7" LPM_DECODES=8 LPM_WIDTH=3 data enable eq
--VERSION_BEGIN 24.3 cbx_lpm_add_sub 2024:10:24:10:32:27:SC cbx_lpm_compare 2024:10:24:10:32:27:SC cbx_lpm_decode 2024:10:24:10:32:27:SC cbx_mgl 2024:10:24:10:32:30:SC cbx_nadder 2024:10:24:10:32:27:SC cbx_stratix 2024:10:24:10:32:27:SC cbx_stratixii 2024:10:24:10:32:27:SC  VERSION_END


-- Copyright (C) 2024  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the Intel FPGA Software License Subscription Agreements 
--  on the Quartus Prime software download page.



--synthesis_resources = lut 8 
SUBDESIGN decode_bhfv
( 
	data[2..0]	:	input;
	enable	:	input;
	eq[7..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[7..0]	: WIRE;
	eq_wire[7..0]	: WIRE;
	w_anode158w[3..0]	: WIRE;
	w_anode175w[3..0]	: WIRE;
	w_anode185w[3..0]	: WIRE;
	w_anode195w[3..0]	: WIRE;
	w_anode205w[3..0]	: WIRE;
	w_anode215w[3..0]	: WIRE;
	w_anode225w[3..0]	: WIRE;
	w_anode235w[3..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[7..0] = eq_wire[7..0];
	eq_wire[] = ( w_anode235w[3..3], w_anode225w[3..3], w_anode215w[3..3], w_anode205w[3..3], w_anode195w[3..3], w_anode185w[3..3], w_anode175w[3..3], w_anode158w[3..3]);
	w_anode158w[] = ( (w_anode158w[2..2] & (! data_wire[2..2])), (w_anode158w[1..1] & (! data_wire[1..1])), (w_anode158w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode175w[] = ( (w_anode175w[2..2] & (! data_wire[2..2])), (w_anode175w[1..1] & (! data_wire[1..1])), (w_anode175w[0..0] & data_wire[0..0]), enable_wire);
	w_anode185w[] = ( (w_anode185w[2..2] & (! data_wire[2..2])), (w_anode185w[1..1] & data_wire[1..1]), (w_anode185w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode195w[] = ( (w_anode195w[2..2] & (! data_wire[2..2])), (w_anode195w[1..1] & data_wire[1..1]), (w_anode195w[0..0] & data_wire[0..0]), enable_wire);
	w_anode205w[] = ( (w_anode205w[2..2] & data_wire[2..2]), (w_anode205w[1..1] & (! data_wire[1..1])), (w_anode205w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode215w[] = ( (w_anode215w[2..2] & data_wire[2..2]), (w_anode215w[1..1] & (! data_wire[1..1])), (w_anode215w[0..0] & data_wire[0..0]), enable_wire);
	w_anode225w[] = ( (w_anode225w[2..2] & data_wire[2..2]), (w_anode225w[1..1] & data_wire[1..1]), (w_anode225w[0..0] & (! data_wire[0..0])), enable_wire);
	w_anode235w[] = ( (w_anode235w[2..2] & data_wire[2..2]), (w_anode235w[1..1] & data_wire[1..1]), (w_anode235w[0..0] & data_wire[0..0]), enable_wire);
END;
--VALID FILE
